{
  "HtmlContent": "PCFET0NUWVBFIGh0bWw+CjxodG1sPgoKPGhlYWQ+CiAgIDxzdHlsZT4KICAgICAgQGltcG9ydCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUludGVyOml0YWwsb3Bzeix3Z2h0QDAsMTQuLjMyLDEwMC4uOTAwOzEsMTQuLjMyLDEwMC4uOTAwJmRpc3BsYXk9c3dhcCI7CgogICAgICAuX3BsYXllcl9rYmV4Yl8xIHsKICAgICAgICAgLS1nYXA6IC0yMHB4OwogICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgICBnYXA6IDE1cHg7CiAgICAgICAgIGZsZXg6IDAgMCBhdXRvOwogICAgICAgICB3aWR0aDogMTAwcHgKICAgICAgfQoKICAgICAgLl9wbGF5ZXJfa2JleGJfMSAuX2NhcmRzX2tiZXhiXzEwIHsKICAgICAgICAgZGlzcGxheTogZmxleAogICAgICB9CgogICAgICAuX3BsYXllcl9rYmV4Yl8xIC5fY2FyZHNfa2JleGJfMTAgLl9jYXJkX2tiZXhiXzEwIHsKICAgICAgICAgd2lkdGg6IDMwcHgKICAgICAgfQoKICAgICAgLl9wbGF5ZXJfa2JleGJfMSAuX2NhcmRzX2tiZXhiXzEwIC5fY2FyZF9rYmV4Yl8xMDpub3QoOmZpcnN0LWNoaWxkKSB7CiAgICAgICAgIG1hcmdpbi1sZWZ0OiB2YXIoLS1nYXApCiAgICAgIH0KCiAgICAgIC5fYXZhdGFyX29xcXZ6XzEgewogICAgICAgICB3aWR0aDogNjBweDsKICAgICAgICAgYXNwZWN0LXJhdGlvOiAxOwogICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmOwogICAgICAgICBib3JkZXItcmFkaXVzOiAxMDAlOwogICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmUKICAgICAgfQoKICAgICAgLl9hdmF0YXJfb3FxdnpfMSAuX25hbWVfb3FxdnpfOSB7CiAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgei1pbmRleDogMTsKICAgICAgICAgZm9udC1zaXplOiAxMHB4OwogICAgICAgICBmb250LXdlaWdodDogNTAwOwogICAgICAgICBjb2xvcjogIzAwMDsKICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXIKICAgICAgfQoKICAgICAgLl9hdmF0YXJfb3FxdnpfMSAuX2ltYWdlX29xcXZ6XzIxIHsKICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICAgcG9zaXRpb246IGFic29sdXRlCiAgICAgIH0KCiAgICAgIC5fZGVja193cmFwcGVyXzFzazJ0XzEgewogICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICAgICAgIHRvcDogMDsKICAgICAgICAgbGVmdDogMDsKICAgICAgICAgd2lkdGg6IDMwcHg7CiAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXIKICAgICAgfQoKICAgICAgLl9kZWNrX3dyYXBwZXJfMXNrMnRfMSAuX3RydW1wXzFzazJ0XzExIHsKICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICBsZWZ0OiAtNDVweDsKICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpICFpbXBvcnRhbnQ7CiAgICAgICAgIHdpZHRoOiA3MHB4CiAgICAgIH0KCiAgICAgIC5fZGVja193cmFwcGVyXzFzazJ0XzEgLl9zdGFja18xc2sydF8xNyB7CiAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgbGVmdDogLTU1cHg7CiAgICAgICAgIHdpZHRoOiA3NXB4OwogICAgICAgICB6LWluZGV4OiAxCiAgICAgIH0KCiAgICAgIC5fY2FyZF8xMm80a18xIHsKICAgICAgICAgZmlsdGVyOiBkcm9wLXNoYWRvdygwcHggNXB4IDMwcHggcmdiYSgwLCAwLCAwLCAuMDUpKTsKICAgICAgICAgdG91Y2gtYWN0aW9uOiBub25lOwogICAgICAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOwogICAgICAgICB1c2VyLXNlbGVjdDogbm9uZQogICAgICB9CgogICAgICAuX2NhcmRfMTJvNGtfMS5fZHJhZ2dhYmxlXzEybzRrXzYgewogICAgICAgICB0cmFuc2l0aW9uOiBmaWx0ZXIgLjNzIGVhc2UsIHNjYWxlIC4ycyBlYXNlOwogICAgICAgICBjdXJzb3I6IGdyYWIKICAgICAgfQoKICAgICAgLl9jYXJkXzEybzRrXzEuX2RyYWdnYWJsZV8xMm80a182OmFjdGl2ZSB7CiAgICAgICAgIGN1cnNvcjogZ3JhYmJpbmcKICAgICAgfQoKICAgICAgLl9jYXJkXzEybzRrXzEuX2RyYWdnaW5nXzEybzRrXzEzIHsKICAgICAgICAgZmlsdGVyOiBkcm9wLXNoYWRvdygwcHggNXB4IDUwcHggcmdiYSgwLCAwLCAwLCAuNCkpOwogICAgICAgICBzY2FsZTogMS4wNQogICAgICB9CgogICAgICAuX2NhcmRzX3dyYXBwZXJfNnR2MTZfMSB7CiAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgICAgICAgei1pbmRleDogMjA7CiAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgIGJvdHRvbTogMDsKICAgICAgICAgd2lkdGg6IDEwMCUKICAgICAgfQoKICAgICAgLl9yb290XzZ0djE2XzkgewogICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgbWF4LXdpZHRoOiA2MDBweDsKICAgICAgICAgbWFyZ2luOiAwIGF1dG87CiAgICAgICAgIGRpc3BsYXk6IGdyaWQ7CiAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgbWlubWF4KDAsIDFmcikpOwogICAgICAgICBncmlkLWF1dG8tZmxvdzogZGVuc2U7CiAgICAgICAgIHBhZGRpbmc6IDAgNjBweDsKICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIC4ycyBlYXNlLW91dAogICAgICB9CgogICAgICBAbWVkaWEgKGhvdmVyOiBob3ZlcikgYW5kIChwb2ludGVyOiBmaW5lKSB7CiAgICAgICAgIC5fcm9vdF82dHYxNl85OmhvdmVyIHsKICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC00MHB4KSAhaW1wb3J0YW50CiAgICAgICAgIH0KICAgICAgfQoKICAgICAgLl9yb290XzZ0djE2Xzk+KiB7CiAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgYm90dG9tOiAtMTAwcHg7CiAgICAgICAgIHdpZHRoOiBjbGFtcCgxMDBweCwgMTV2aCwgMTYwcHgpOwogICAgICAgICBncmlkLXJvdy1zdGFydDogMTsKICAgICAgICAganVzdGlmeS1zZWxmOiBjZW50ZXI7CiAgICAgICAgIGFuaW1hdGlvbjogX2NhcmQtc2xpZGVfNnR2MTZfMSAuM3MgZWFzZS1vdXQKICAgICAgfQoKICAgICAgLl9yb290XzZ0djE2Xzk+Kjpub3QoOmZpcnN0LWNoaWxkKSB7CiAgICAgICAgIGZpbHRlcjogZHJvcC1zaGFkb3coMHB4IDVweCAzMHB4IHJnYmEoMCwgMCwgMCwgLjUpKQogICAgICB9CgogICAgICBAa2V5ZnJhbWVzIF9jYXJkLXNsaWRlXzZ0djE2XzEgewogICAgICAgICAwJSB7CiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDBweCk7CiAgICAgICAgICAgIG9wYWNpdHk6IC4yCiAgICAgICAgIH0KCiAgICAgICAgIHRvIHsKICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApOwogICAgICAgICAgICBvcGFjaXR5OiAxCiAgICAgICAgIH0KICAgICAgfQoKICAgICAgLl93cmFwcGVyXzFsZ3BiXzEgewogICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICAgICAgIHotaW5kZXg6IDE7CiAgICAgICAgIHBhZGRpbmc6IDMwcHggMjVweDsKICAgICAgICAgZGlzcGxheTogZ3JpZDsKICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMWZyKTsKICAgICAgICAgbWluLWhlaWdodDogMzAwcHg7CiAgICAgICAgIGdhcDogMTJweDsKICAgICAgICAgbWF4LXdpZHRoOiA4MDBweDsKICAgICAgICAgd2lkdGg6IDEwMCUKICAgICAgfQoKICAgICAgLl93cmFwcGVyXzFsZ3BiXzEuX2Ryb3BfMWxncGJfMTMgewogICAgICAgICBib3JkZXI6IDJweCBkYXNoZWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAuNik7CiAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweAogICAgICB9CgogICAgICAuX3dyYXBwZXJfMWxncGJfMT5pbWcgewogICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgICBvYmplY3QtZml0OiBjb250YWluOwogICAgICAgICBib3JkZXItcmFkaXVzOiA2cHgKICAgICAgfQoKICAgICAgLl93cmFwcGVyXzFsZ3BiXzEgLl9zbG90XzFsZ3BiXzIzIHsKICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyCiAgICAgIH0KCiAgICAgIC5fd3JhcHBlcl8xbGdwYl8xIC5fc2xvdF8xbGdwYl8yMy5fZHJvcF8xbGdwYl8xMyB7CiAgICAgICAgIGJvcmRlcjogMnB4IGRhc2hlZCByZ2JhKDI1NSwgMjU1LCAyNTUsIC4zKTsKICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4CiAgICAgIH0KCiAgICAgIC5fd3JhcHBlcl8xbGdwYl8xIC5fc2xvdF8xbGdwYl8yMz4qIHsKICAgICAgICAgd2lkdGg6IDc1cHg7CiAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDFzIGVhc2Utb3V0ICFpbXBvcnRhbnQ7CiAgICAgICAgIGFuaW1hdGlvbjogX2NhcmQtYXBwZWFyXzFsZ3BiXzEgLjI1cyBlYXNlLWluLW91dAogICAgICB9CgogICAgICAuX3dyYXBwZXJfMWxncGJfMSAuX3Nsb3RfMWxncGJfMjM+Kjpub3QoOmZpcnN0LWNoaWxkKSB7CiAgICAgICAgIG1hcmdpbi1sZWZ0OiAtNzBweDsKICAgICAgICAgZmlsdGVyOiBkcm9wLXNoYWRvdygwcHggNXB4IDMwcHggcmdiYSgwLCAwLCAwLCAuMSkpCiAgICAgIH0KCiAgICAgIEBrZXlmcmFtZXMgX2NhcmQtYXBwZWFyXzFsZ3BiXzEgewogICAgICAgICAwJSB7CiAgICAgICAgICAgIG9wYWNpdHk6IC4yOwogICAgICAgICAgICBzY2FsZTogMS4yOwogICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLThweCkKICAgICAgICAgfQoKICAgICAgICAgdG8gewogICAgICAgICAgICBvcGFjaXR5OiAxOwogICAgICAgICAgICBzY2FsZTogMTsKICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApCiAgICAgICAgIH0KICAgICAgfQoKICAgICAgLl9maWVsZF8xaHQ4b18xIHsKICAgICAgICAgZmxleDogMSAxIGF1dG87CiAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgICAgICAgcGFkZGluZzogMCAxNXB4OwogICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7CiAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgICAgIGJhY2tncm91bmQ6IHVybChkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUNnQUFBQW9DQU1BQUFDN0lFaGZBQUFBQmxCTVZFVUpGa0lKRXpPTk93R1lBQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBRklHbFVXSFJZVFV3NlkyOXRMbUZrYjJKbExuaHRjQUFBQUFBQVBEOTRjR0ZqYTJWMElHSmxaMmx1UFNMdnU3OGlJR2xrUFNKWE5VMHdUWEJEWldocFNIcHlaVk42VGxSamVtdGpPV1FpUHo0Z1BIZzZlRzF3YldWMFlTQjRiV3h1Y3pwNFBTSmhaRzlpWlRwdWN6cHRaWFJoTHlJZ2VEcDRiWEIwYXowaVFXUnZZbVVnV0UxUUlFTnZjbVVnTlM0MkxXTXhOREFnTnprdU1UWXdORFV4TENBeU1ERTNMekExTHpBMkxUQXhPakE0T2pJeElDQWdJQ0FnSUNBaVBpQThjbVJtT2xKRVJpQjRiV3h1Y3pweVpHWTlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5MekU1T1Rrdk1ESXZNakl0Y21SbUxYTjViblJoZUMxdWN5TWlQaUE4Y21SbU9rUmxjMk55YVhCMGFXOXVJSEprWmpwaFltOTFkRDBpSWlCNGJXeHVjenA0YlhBOUltaDBkSEE2THk5dWN5NWhaRzlpWlM1amIyMHZlR0Z3THpFdU1DOGlJSGh0Ykc1ek9tUmpQU0pvZEhSd09pOHZjSFZ5YkM1dmNtY3ZaR012Wld4bGJXVnVkSE12TVM0eEx5SWdlRzFzYm5NNmNHaHZkRzl6YUc5d1BTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM0JvYjNSdmMyaHZjQzh4TGpBdklpQjRiV3h1Y3pwNGJYQk5UVDBpYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5NFlYQXZNUzR3TDIxdEx5SWdlRzFzYm5NNmMzUkZkblE5SW1oMGRIQTZMeTl1Y3k1aFpHOWlaUzVqYjIwdmVHRndMekV1TUM5elZIbHdaUzlTWlhOdmRYSmpaVVYyWlc1MEl5SWdlRzF3T2tOeVpXRjBiM0pVYjI5c1BTSkJaRzlpWlNCUWFHOTBiM05vYjNBZ1EwTWdNakF4T0NBb1RXRmphVzUwYjNOb0tTSWdlRzF3T2tOeVpXRjBaVVJoZEdVOUlqSXdNakV0TURrdE1qTlVNak02TXpZNk5UQXJNRE02TURBaUlIaHRjRHBOYjJScFpubEVZWFJsUFNJeU1ESXhMVEE1TFRJMFZERTBPakV5T2pFMUt6QXpPakF3SWlCNGJYQTZUV1YwWVdSaGRHRkVZWFJsUFNJeU1ESXhMVEE1TFRJMFZERTBPakV5T2pFMUt6QXpPakF3SWlCa1l6cG1iM0p0WVhROUltbHRZV2RsTDNCdVp5SWdjR2h2ZEc5emFHOXdPa052Ykc5eVRXOWtaVDBpTWlJZ2NHaHZkRzl6YUc5d09rbERRMUJ5YjJacGJHVTlJbk5TUjBJZ1NVVkROakU1TmpZdE1pNHhJaUI0YlhCTlRUcEpibk4wWVc1alpVbEVQU0o0YlhBdWFXbGtPbVZqTWpBeFpETTFMVFF3WmpVdE5EZ3lPQzFoT0RobUxUTTFZakpqTnpFMk1EWmtNU0lnZUcxd1RVMDZSRzlqZFcxbGJuUkpSRDBpZUcxd0xtUnBaRHBsWXpJd01XUXpOUzAwTUdZMUxUUTRNamd0WVRnNFppMHpOV0l5WXpjeE5qQTJaREVpSUhodGNFMU5Pazl5YVdkcGJtRnNSRzlqZFcxbGJuUkpSRDBpZUcxd0xtUnBaRHBsWXpJd01XUXpOUzAwTUdZMUxUUTRNamd0WVRnNFppMHpOV0l5WXpjeE5qQTJaREVpUGlBOGVHMXdUVTA2U0dsemRHOXllVDRnUEhKa1pqcFRaWEUrSUR4eVpHWTZiR2tnYzNSRmRuUTZZV04wYVc5dVBTSmpjbVZoZEdWa0lpQnpkRVYyZERwcGJuTjBZVzVqWlVsRVBTSjRiWEF1YVdsa09tVmpNakF4WkRNMUxUUXdaalV0TkRneU9DMWhPRGhtTFRNMVlqSmpOekUyTURaa01TSWdjM1JGZG5RNmQyaGxiajBpTWpBeU1TMHdPUzB5TTFReU16b3pOam8xTUNzd016b3dNQ0lnYzNSRmRuUTZjMjltZEhkaGNtVkJaMlZ1ZEQwaVFXUnZZbVVnVUdodmRHOXphRzl3SUVORElESXdNVGdnS0UxaFkybHVkRzl6YUNraUx6NGdQQzl5WkdZNlUyVnhQaUE4TDNodGNFMU5Pa2hwYzNSdmNuaytJRHd2Y21SbU9rUmxjMk55YVhCMGFXOXVQaUE4TDNKa1pqcFNSRVkrSUR3dmVEcDRiWEJ0WlhSaFBpQThQM2h3WVdOclpYUWdaVzVrUFNKeUlqOCtBREVpQkFBQUFLWkpSRUZVT011dGxWRU9nREFJUStuOUwyMmljUXhHTzJia3g0alA0YUNkWm5mQWd5VGU0S0RsU0htR2pVZlAxZThZT0dvYUIrY05GSVhCMFlpQkxocnpCbndDalhHd1pXOGxOdHFSODhXYmgyRCs4bUswZlBoeGN4c1FNNmdFNEt1UmpranBMZWpTZkRxMkg4Qk5hZTZQR1pUdGdmdEkrVEwyOFdBeVdoUUovRjJQMGdwSkdBMXpOZXlLSTEvckl3WENSa0RYUjVrc0JTMzZXMmdOUW5yZHczNy8rN2dBcUVrQ3ZKVlFPNXdBQUFBQVNVVk9SSzVDWUlJPSk7CiAgICAgICAgIGJhY2tncm91bmQtc2l6ZTogMTBweDsKICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IHJlcGVhdAogICAgICB9CgogICAgICAuX3BsYXllcnNfMWh0OG9fMTQgewogICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7CiAgICAgICAgIGdhcDogMTBweDsKICAgICAgICAgcGFkZGluZzogMzVweCAwIDI1cHgKICAgICAgfQoKICAgICAgLl9uYXZiYXJfMTc3NjBfMSB7CiAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICBoZWlnaHQ6IDc1cHg7CiAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgICBwYWRkaW5nOiAyNXB4OwogICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgICB6LWluZGV4OiAyNTsKICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzFiMmY3MwogICAgICB9CgogICAgICAuX25hdmJhcl8xNzc2MF8xIGgxIHsKICAgICAgICAgY29sb3I6ICNmZmY7CiAgICAgICAgIGZvbnQtc2l6ZTogMThweAogICAgICB9CgogICAgICA6cm9vdCB7CiAgICAgICAgIGZvbnQtZmFtaWx5OiBJbnRlciwgc3lzdGVtLXVpLCBBdmVuaXIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7CiAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjU7CiAgICAgICAgIGZvbnQtd2VpZ2h0OiA0MDA7CiAgICAgICAgIGNvbG9yLXNjaGVtZTogbGlnaHQgZGFyazsKICAgICAgICAgY29sb3I6ICNmZmZmZmZkZTsKICAgICAgICAgZm9udC1zeW50aGVzaXM6IG5vbmU7CiAgICAgICAgIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7CiAgICAgICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkOwogICAgICAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlCiAgICAgIH0KCiAgICAgIEBmb250LWZhY2UgewogICAgICAgICBmb250LWZhbWlseTogTnVuaXRvOwogICAgICAgICBzcmM6IHVybCgvZHVyYWsvTnVuaXRvLUQyc0FEa0VJLnR0ZikgZm9ybWF0KCJ0cnVldHlwZSIpCiAgICAgIH0KCiAgICAgICosCiAgICAgICo6YWZ0ZXIsCiAgICAgICo6YmVmb3JlIHsKICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveAogICAgICB9CgogICAgICBwIHsKICAgICAgICAgbWFyZ2luOiAwCiAgICAgIH0KCiAgICAgIGEgewogICAgICAgICBmb250LXdlaWdodDogNTAwOwogICAgICAgICBjb2xvcjogIzY0NmNmZjsKICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0CiAgICAgIH0KCiAgICAgIGE6aG92ZXIgewogICAgICAgICBjb2xvcjogIzUzNWJmMgogICAgICB9CgogICAgICBib2R5IHsKICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgICBwYWRkaW5nOiAwCiAgICAgIH0KCiAgICAgIC5yb290IHsKICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgICAgICAgcG9zaXRpb246IGFic29sdXRlOwogICAgICAgICB0b3A6IDA7CiAgICAgICAgIGxlZnQ6IDA7CiAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgICAgIG1heC1oZWlnaHQ6IDEwMCU7CiAgICAgICAgIG92ZXJmbG93OiBoaWRkZW4KICAgICAgfQogICA8L3N0eWxlPgogICA8bWV0YSBjaGFyc2V0PSJVVEYtOCIgLz4KICAgPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS9zdmcreG1sIiBocmVmPSIvZHVyYWsvdml0ZS5zdmciIC8+CiAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIiAvPgogICA8dGl0bGU+Vml0ZSArIFJlYWN0ICsgVFM8L3RpdGxlPgogICA8c2NyaXB0IHR5cGU9Im1vZHVsZSIgY3Jvc3NvcmlnaW4gc3JjPSIvZHVyYWsvaW5kZXgtQmtsNmF4ZWcuanMiPjwvc2NyaXB0PgogICA8bGluayByZWw9InN0eWxlc2hlZXQiIGNyb3Nzb3JpZ2luIGhyZWY9Ii9kdXJhay9pbmRleC1EVzFBS2xRdS5jc3MiPgo8L2hlYWQ+Cgo8Ym9keT4KICAgPGRpdiBpZD0icm9vdCI+PC9kaXY+CjwvYm9keT4KCjwvaHRtbD4=",
  "Scripts": [ "http://127.0.0.1:5500/durak/index-Bkl6axeg.js" ]
}